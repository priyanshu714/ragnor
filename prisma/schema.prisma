generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(uuid())
  clerkUserId      String    @unique
  email            String    @unique
  name             String?
  imageUrl         String?
  industry         String    // Industry must be provided
  industryInsight  IndustryInsight? @relation(fields: [industryInsightId], references: [id])
  industryInsightId String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Profile fields
  bio           String?
  experience    Int?      // Years of experience

  // Relations
  skills        String[]  // Array of skills
  assessments   Assessment[]
  resume        Resume?
  coverLetter   CoverLetter[]
}

model IndustryInsight {
  id               String   @id @default(cuid())
  industry         String   @unique
  users            User[]
  salaryRanges     Json[]   // If frequently queried, consider normalizing
  growthRate       Float
  demandLevel      DemandLevel
  marketOutlook    MarketOutlook
  topSkills        String[]
  keyTrends        String[]
  recommendedSkills String[]
  lastUpdated      DateTime @default(now())
  nextUpdate       DateTime @default(dbgenerated("CURRENT_TIMESTAMP + interval '7 days'"))

  @@index([industry])
}

model Assessment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  quizScore       Float
  questions       Json[]    // Array of {question, answer, userAnswer, isCorrect}
  category        String    // Technical, Behavioral, etc.
  improvementTip  String?   // AI-generated improvement tip
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

model Resume {
  id           String    @id @default(cuid())
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id])
  content      String    @db.Text // Markdown content
  atsScore     Float?
  feedback     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model CoverLetter {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  content         String    // Markdown content
  jobDescription  String?
  companyName     String
  jobTitle        String
  status          String    @default("draft") // Draft, Completed
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}
